#include <stdio.h>
#include <stdint.h>

// Constants for block sizes
#define BLOCK_SIZE_64  8 // 64 bits in bytes
#define BLOCK_SIZE_128 16 // 128 bits in bytes

// Constants for CMAC subkey generation
#define CONST1_64 0x1B // Constant for 64-bit block size
#define CONST1_128 0x87 // Constant for 128-bit block size

// Function to perform left shift and conditional XOR for subkey generation
void generate_subkeys(uint8_t *key, uint8_t *K1, uint8_t *K2, int block_size) {
    // Generate K1
    for (int i = 0; i < block_size; ++i) {
        K1[i] = key[i] << 1;
        if (i < block_size - 1 && (key[i + 1] & 0x80)) {
            K1[i] ^= (block_size == BLOCK_SIZE_64) ? CONST1_64 : CONST1_128;
        }
    }

    // Generate K2
    for (int i = 0; i < block_size; ++i) {
        K2[i] = K1[i] << 1;
        if (i < block_size - 1 && (K1[i + 1] & 0x80)) {
            K2[i] ^= (block_size == BLOCK_SIZE_64) ? CONST1_64 : CONST1_128;
        }
    }
}

int main() {
    uint8_t key_64[BLOCK_SIZE_64] = {0}; // Example 64-bit key (all zeros)
    uint8_t key_128[BLOCK_SIZE_128] = {0}; // Example 128-bit key (all zeros)
    uint8_t K1_64[BLOCK_SIZE_64];
    uint8_t K2_64[BLOCK_SIZE_64];
    uint8_t K1_128[BLOCK_SIZE_128];
    uint8_t K2_128[BLOCK_SIZE_128];

    // Generate subkeys for 64-bit block size
    generate_subkeys(key_64, K1_64, K2_64, BLOCK_SIZE_64);

    // Generate subkeys for 128-bit block size
    generate_subkeys(key_128, K1_128, K2_128, BLOCK_SIZE_128);

    // Print the generated subkeys
    printf("K1 for 64-bit block size: ");
    for (int i = 0; i < BLOCK_SIZE_64; ++i) {
        printf("%02X ", K1_64[i]);
    }
    printf("\n");

    printf("K2 for 64-bit block size: ");
    for (int i = 0; i < BLOCK_SIZE_64; ++i) {
        printf("%02X ", K2_64[i]);
    }
    printf("\n");

    printf("K1 for 128-bit block size: ");
    for (int i = 0; i < BLOCK_SIZE_128; ++i) {
        printf("%02X ", K1_128[i]);
    }
    printf("\n");

    printf("K2 for 128-bit block size: ");
    for (int i = 0; i < BLOCK_SIZE_128; ++i) {
        printf("%02X ", K2_128[i]);
    }
    printf("\n");

    return 0;
}
output:
k1 for 64-bit block size: 00 00 00 00 00 00 00 36
K2 for 64-bit block size: 00 00 00 00 00 00 00 6C
K1 for 128-bit block size: 00 00 00 00 00 00 00 6D 00 00 00 00 00 00 00 DA 
K2 for 128-bit block size: 00 00 00 00 00 00 00 DA 00 00 00 00 00 00 01 B4