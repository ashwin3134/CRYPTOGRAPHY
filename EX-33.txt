#include <stdio.h>
#include <stdint.h>

// Initial and final permutation tables
static const int IP[] = { 58, 50, 42, 34, 26, 18, 10, 2,
                          60, 52, 44, 36, 28, 20, 12, 4,
                          62, 54, 46, 38, 30, 22, 14, 6,
                          64, 56, 48, 40, 32, 24, 16, 8,
                          57, 49, 41, 33, 25, 17, 9, 1,
                          59, 51, 43, 35, 27, 19, 11, 3,
                          61, 53, 45, 37, 29, 21, 13, 5,
                          63, 55, 47, 39, 31, 23, 15, 7 };

static const int FP[] = { 40, 8, 48, 16, 56, 24, 64, 32,
                          39, 7, 47, 15, 55, 23, 63, 31,
                          38, 6, 46, 14, 54, 22, 62, 30,
                          37, 5, 45, 13, 53, 21, 61, 29,
                          36, 4, 44, 12, 52, 20, 60, 28,
                          35, 3, 43, 11, 51, 19, 59, 27,
                          34, 2, 42, 10, 50, 18, 58, 26,
                          33, 1, 41, 9, 49, 17, 57, 25 };

// Expansion permutation table
static const int E[] = { 32, 1, 2, 3, 4, 5,
                         4, 5, 6, 7, 8, 9,
                         8, 9, 10, 11, 12, 13,
                         12, 13, 14, 15, 16, 17,
                         16, 17, 18, 19, 20, 21,
                         20, 21, 22, 23, 24, 25,
                         24, 25, 26, 27, 28, 29,
                         28, 29, 30, 31, 32, 1 };

// Permutation functions
void initial_permutation(uint8_t *block);
void final_permutation(uint8_t *block);
void expand(uint8_t *r, uint8_t *expanded_r);
void feistel(uint8_t *r, uint8_t *subkey, uint8_t *result);
void generate_subkeys(uint8_t *key, uint8_t subkeys[][6]);
void des_encrypt_block(uint8_t *block, uint8_t subkeys[][6]);
void des_decrypt_block(uint8_t *block, uint8_t subkeys[][6]);

// Helper function to print a block of 8 bytes in hex format
void print_block(uint8_t *block) {
    for (int i = 0; i < 8; ++i) {
        printf("%02X ", block[i]);
    }
    printf("\n");
}

int main() {
    // Example plaintext and key (both should be 8 bytes)
    uint8_t plaintext[8] = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF };
    uint8_t key[8] = { 0x13, 0x34, 0x57, 0x79, 0x9B, 0xBC, 0xDF, 0xF1 };

    // Print plaintext and key
    printf("Plaintext: ");
    print_block(plaintext);

    printf("Key:       ");
    print_block(key);

    // Encrypt plaintext using DES
    des_encrypt_block(plaintext, key);

    // Print encrypted ciphertext
    printf("Ciphertext:");
    print_block(plaintext);

    // Decrypt ciphertext using DES
    des_decrypt_block(plaintext, key);

    // Print decrypted plaintext
    printf("Decrypted plaintext: ");
    print_block(plaintext);

    return 0;
}

// Initial permutation (IP)
void initial_permutation(uint8_t *block) {
    uint8_t temp[8];
    for (int i = 0; i < 64; ++i) {
        int bit_position = IP[i] - 1;
        int byte_index = bit_position / 8;
        int bit_index = 7 - (bit_position % 8);
        int bit_value = (block[byte_index] >> bit_index) & 0x01;
        temp[i / 8] |= (bit_value << (7 - (i % 8)));
    }
    memcpy(block, temp, 8);
}

// Final permutation (FP)
void final_permutation(uint8_t *block) {
    uint8_t temp[8];
    for (int i = 0; i < 64; ++i) {
        int bit_position = FP[i] - 1;
        int byte_index = bit_position / 8;
        int bit_index = 7 - (bit_position % 8);
        int bit_value = (block[byte_index] >> bit_index) & 0x01;
        temp[i / 8] |= (bit_value << (7 - (i % 8)));
    }
    memcpy(block, temp, 8);
}

// Expansion function (E)
void expand(uint8_t *r, uint8_t *expanded_r) {
    for (int i = 0; i < 48; ++i) {
        int bit_position = E[i] - 1;
        int byte_index = bit_position / 8;
        int bit_index = 7 - (bit_position % 8);
        int bit_value = (r[byte_index] >> bit_index) & 0x01;
        expanded_r[i / 8] |= (bit_value << (7 - (i % 8)));
    }
}

// Feistel function
void feistel(uint8_t *r, uint8_t *subkey, uint8_t *result) {
    // Apply expansion permutation
    uint8_t expanded_r[6] = {0};
    expand(r, expanded_r);

    // XOR with subkey
    for (int i = 0; i < 6; ++i) {
        expanded_r[i] ^= subkey[i];
    }

    // S-box substitution (not implemented here)

    // P-box permutation (not implemented here)

    // XOR with L
    // (L is the left half of the original 64-bit block)
    // (R is the right half of the original 64-bit block)
    // (L' = R)
    // (R' = L ^ f(R, K))
    // -> f is the round function 
}

// Key schedule to generate 16 round keys from the initial key
void generate_subkeys(uint8_t *key, uint8_t subkeys[][6]) {
    // Implement the key schedule to generate 16 round keys from the 56-bit initial key
}

// DES encryption function
void des_encrypt_block(uint8_t *block, uint8_t subkeys[][6]) {
    // Initial permutation
    initial_permutation(block);

    // Implement the 16 rounds of DES encryption
    for (int round = 0; round < 16; ++round) {
        feistel(/* Pass parameters */);
    }

    // Final permutation
    final_permutation(block);
}

// DES decryption function
void des_decrypt_block(uint8_t *block, uint8_t subkeys[][6]) {
    // Initial permutation
    initial_permutation(block);

    // Implement the 16 rounds of DES decryption (reverse order of encryption)
    for (int round = 15; round >= 0; --round) {
        feistel(/* Pass parameters */);
    }

    // Final permutation
    final_permutation(block);
}