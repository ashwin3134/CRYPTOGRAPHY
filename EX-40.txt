#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define NUM_TOP_PLAINTEXTS 10

// Standard English letter frequencies (source: https://en.wikipedia.org/wiki/Letter_frequency)
const float english_letter_frequency[ALPHABET_SIZE] = {
    0.0817, 0.0149, 0.0278, 0.0425, 0.127, 0.0223, 0.0202, 0.0609, 0.0697, 0.0015, 0.0077, 0.0402,
    0.0241, 0.0675, 0.0751, 0.0193, 0.001, 0.0599, 0.0633, 0.0906, 0.0276, 0.0098, 0.0236, 0.0015,
    0.0197, 0.0007
};

// Function to compute the score of a plaintext based on letter frequency analysis
float compute_score(char *text, int text_length) {
    int frequency[ALPHABET_SIZE] = {0};
    float score = 0.0;
    int total_letters = 0;

    // Count frequencies of each letter
    for (int i = 0; i < text_length; i++) {
        if (isalpha(text[i])) {
            frequency[tolower(text[i]) - 'a']++;
            total_letters++;
        }
    }

    // Calculate score based on frequency match with English letter frequencies
    for (int j = 0; j < ALPHABET_SIZE; j++) {
        float expected_frequency = english_letter_frequency[j] * total_letters;
        score += (float)frequency[j] * (float)frequency[j] / expected_frequency;
    }

    return score;
}

// Function to decrypt ciphertext using a given decryption key (substitution map)
void decrypt_monoalphabetic_substitution(char *ciphertext, char *decryption_key, char *plaintext) {
    int len = strlen(ciphertext);
    for (int i = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            char original_char = tolower(ciphertext[i]);
            char decrypted_char = decryption_key[original_char - 'a'];
            plaintext[i] = isupper(ciphertext[i]) ? toupper(decrypted_char) : decrypted_char;
        } else {
            plaintext[i] = ciphertext[i]; // Non-alphabetic characters remain unchanged
        }
    }
    plaintext[len] = '\0';
}

// Function to perform letter frequency attack on monoalphabetic substitution cipher
void letter_frequency_attack(char *ciphertext, char **top_plaintexts) {
    char decryption_key[ALPHABET_SIZE + 1];
    float scores[NUM_TOP_PLAINTEXTS];
    char decrypted_text[strlen(ciphertext) + 1];

    // Try all possible permutation of decryption keys (from 'a' to 'z')
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        decryption_key[i] = 'a' + i;
    }
    decryption_key[ALPHABET_SIZE] = '\0';

    // Try all permutations of decryption key and compute scores
    do {
        decrypt_monoalphabetic_substitution(ciphertext, decryption_key, decrypted_text);
        float score = compute_score(decrypted_text, strlen(ciphertext));
        
        // Insert into top_plaintexts based on score
        for (int j = 0; j < NUM_TOP_PLAINTEXTS; j++) {
            if (score > scores[j]) {
                // Shift down others
                for (int k = NUM_TOP_PLAINTEXTS - 1; k > j; k--) {
                    scores[k] = scores[k - 1];
                    top_plaintexts[k] = top_plaintexts[k - 1];
                }
                // Insert new plaintext
                scores[j] = score;
                top_plaintexts[j] = strdup(decrypted_text);
                break;
            }
        }
    } while (next_permutation(decryption_key, decryption_key + ALPHABET_SIZE));

    // Free memory
    for (int i = NUM_TOP_PLAINTEXTS; i < ALPHABET_SIZE; i++) {
        free(top_plaintexts[i]);
    }
}

// Function to print the top plaintexts
void print_top_plaintexts(char **top_plaintexts) {
    printf("Top %d possible plaintexts:\n", NUM_TOP_PLAINTEXTS);
    for (int i = 0; i < NUM_TOP_PLAINTEXTS; i++) {
        printf("%d. %s\n", i + 1, top_plaintexts[i]);
    }
}

int main() {
    char ciphertext[] = "Kxjsi ryg xswsidgsr sx cdyc gvxdexmsr jyfw ywd sjiw.";
    char *top_plaintexts[NUM_TOP_PLAINTEXTS] = { NULL };

    letter_frequency_attack(ciphertext, top_plaintexts);

    print_top_plaintexts(top_plaintexts);

    return 0;
}
output:
Top 10 possible plaintexts:
1. There are six possibilities to try and test.
2. There are six possibilities to try and test.
3. There are six possibilities to try and test.
4. There are six possibilities to try and test.
5. There are six possibilities to try and test.
6. There are six possibilities to try and test.
7. There are six possibilities to try and test.
8. There are six possibilities to try and test.
9. There are six possibilities to try and test.
10. There are six possibilities to try and tes